# Default tool config file. See also setup.cfg for tools that don't yet
# support pyproject.toml.

[tool.black]
line-length = 88
target-version = ['py311']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | funnel/assets
)/
'''

[tool.djlint]
profile = 'jinja'
extension = '.html.jinja2'
indent = 2
ignore = "T002,T028,H006,H016,H020,H023,H030,H031"

[tool.curlylint]
# Curlylint is not used, but the configuration is preserved here for future use
include = '\.html.jinja2$'
template_tags = [['set'], ['trans', 'pluralize', 'endtrans']]
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | funnel/assets
)/
'''

[tool.curlylint.rules]
# All role attributes must be valid.
# See https://www.curlylint.org/docs/rules/aria_role
aria_role = true
# HTML lang attribute must be set
# See https://www.curlylint.org/docs/rules/html_has_lang
html_has_lang = true
# The `alt` attribute must be present.
# See https://www.curlylint.org/docs/rules/image_alt
image_alt = true
# Indent 2 spaces
# See https://www.curlylint.org/docs/rules/indent
# Enable after issue 6 is fixed: https://github.com/thibaudcolas/curlylint/issues/6
# indent = 2
# Avoid positive `tabindex` values
tabindex_no_positive = true

[tool.isort]
# Some isort functionality is replicated in ruff, which should have matching config
profile = 'black'
multi_line_output = 3
include_trailing_comma = true
line_length = 88
order_by_type = true
use_parentheses = true
combine_as_imports = true
split_on_trailing_comma = false
extra_standard_library = ['typing_extensions']
known_repo = ['hgtv']
known_first_party = ['baseframe', 'coaster', 'flask_lastuser']
default_section = 'THIRDPARTY'
sections = [
  'FUTURE',
  'STDLIB',
  'THIRDPARTY',
  'FIRSTPARTY',
  'REPO',
  'LOCALFOLDER',
]

[tool.pyright]
venv = 'hasgeek'

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = '3.11'

[tool.mypy]
files = '**/*.py'
exclude = 'node_modules'
ignore_missing_imports = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = false
check_untyped_defs = false

[tool.pylint.master]
load-plugins = ['pylint_pytest', 'pylint_flask_sqlalchemy']
max-parents = 10
init-hook = """
import os, astroid.bases, pathlib
# Tell Pylint where to find packages from within tests
for path in pathlib.Path.cwd().parents:
    if (path / 'pyproject.toml').is_file():
      sys.path.append(str(path))
# Tell Pylint hybrid_property and cached_property are property-types
astroid.bases.POSSIBLE_PROPERTIES.add('hybrid_property')
astroid.bases.POSSIBLE_PROPERTIES.add('cached_property')
"""

[tool.pylint.message_control]
max-line-length = 88
disable = [
  'comparison-with-callable',     # Pylint is confused by SQLAlchemy attributes
  'cyclic-import',                # We have tail imports all over
  'duplicate-code',               # Too many false positives
  'fixme',                        # Our workflow is to tag for future fixes
  'invalid-name',                 # Flake8 covers our naming convention requirements
  'no-member',                    # Pylint gets confused over how some members become part of an instance
  'too-few-public-methods',       # Data classes and validator classes have few methods
  'too-many-ancestors',           # Our models have a large number of mixin classes
  'too-many-instance-attributes', # Some instances are just bags of attributes
  'too-many-lines',               # We have large files that include all related functionality
  'too-many-public-methods',      # Models and views have many public methods
  'unused-argument',              # Arguments required for spec compatibility aren't always used
  'wrong-import-position',        # Let black and isort handle this

  # Temporarily disabled pending audit and fixes
  'missing-class-docstring',
  'missing-function-docstring',
  'too-many-branches',
  'too-many-nested-blocks',
  'too-many-return-statements',
  'too-many-statements',
  'too-many-locals',
]

[tool.bandit]
exclude_dirs = ['node_modules']

[tool.bandit.assert_used]
skips = ['*/*_test.py', '*/test_*.py']

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# Same as Black.
line-length = 88

# Target Python 3.11
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true
quote-style = "preserve"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = ["E402", "E501"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow these characters in strings
allowed-confusables = ["‘", "’", "–"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["E402"] # Allow non-top-level imports
"tests/**.py" = [
  "S101",   # Allow assert
  "ANN001", # Args don't need types (usually fixtures)
  "N802",   # Fixture returning a class may be named per class name convention
  "N803",   # Args don't require naming convention (fixture could be a class)
]

[tool.ruff.lint.isort]
# These config options should match isort config above under [tool.isort]
combine-as-imports = true
extra-standard-library = ['typing_extensions']
split-on-trailing-comma = false
relative-imports-order = 'furthest-to-closest'
known-first-party = ['baseframe', 'coaster', 'flask_lastuser']
section-order = [
  'future',
  'standard-library',
  'third-party',
  'first-party',
  'repo',
  'local-folder',
]

[tool.ruff.lint.isort.sections]
repo = ['hgtv']

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true
